krig.init <-
function(mod) {

	n <- nrow(mod@X)
	parinit <- mod@parinit
	lower <- mod@lower
	upper <- mod@upper
	ninit <- mod@control$pop.size
	param.n <- mod@covar@param.n
if (length(parinit)>0) {
matrixinit <- matrix(parinit, nrow = param.n, ncol = ninit) 
} else {
if (existsMethod("paramSample", signature = class(mod@covar))) {
matrixinit <- paramSample(mod@covar, n=ninit, lower=lower, upper=upper, y=mod@y)
} else {
      # sample ninit design points, generated from uniform [lower, upper]
matrixinit <- matrix(runif(ninit*param.n), nrow = param.n, ncol = ninit)
matrixinit <- lower + matrixinit*(upper - lower)
}
}   
 nugget.aux <- mod@noise.var
  
	
		# variance standard estimate (biased negatively)
	trend.estimate <- lm(mod@y~mod@F-1)
	random.part.estimate <- trend.estimate$residuals
	varinit.total <- var(random.part.estimate)
	varinit.standard <- varinit.total - mean(nugget.aux)
	if (varinit.standard <=1e-20) varinit.standard <- 1/2*varinit.total
	
		# variance estimate using the variogram (biased negatively, but less)
	x.dist <- dist(mod@X)
	y.dist <- dist(random.part.estimate)
	I <- (x.dist > quantile(x.dist, 0.5))
	matrix.nugget.aux <- matrix(nugget.aux, n, n)
	matrix.sym.nugget.aux <- (matrix.nugget.aux + t(matrix.nugget.aux))/2
	nugget.aux.I <- matrix.sym.nugget.aux[I]
	varinit.vario.total <- 1/2*mean(y.dist[I]^2)
	varinit.vario <- varinit.vario.total - mean(nugget.aux.I)
	if (varinit.vario<=1e-20) varinit.vario <- 1/2*varinit.vario.total
	
		# final choice
	varinit <- (varinit.standard + varinit.vario)/2
	
	
		# boundaries    
	varinit.upper <- varinit.total - min(nugget.aux) 
	varinit.lower <- varinit.total - max(nugget.aux)
	if (varinit.upper<=1e-20) varinit.upper <- varinit.total
	if (varinit.lower<=1e-20) varinit.lower <- 1e-20
			
	varinit.vario.upper <- varinit.vario.total - min(nugget.aux.I) 
	varinit.vario.lower <- varinit.vario.total - max(nugget.aux.I)
	if (varinit.vario.upper<=1e-20) varinit.vario.upper <- varinit.vario.total
	if (varinit.vario.lower<=1e-20) varinit.vario.lower <- 1e-20
	
		# final choice
	varinit.lower <- 1/10*min(varinit.lower, varinit.vario.lower)
	varinit.upper <- 10*max(varinit.upper, varinit.vario.upper)
			
	varinit.sim <- runif(n=ninit, min=1/2*varinit, max=3/2*varinit)       
					
    # take the best point(s)				 
	matrixinit <- rbind(matrixinit, varinit.sim)
	fninit <- apply(matrixinit, 2,LL, mod)
	selection <- sort(fninit, decreasing = TRUE, index.return = TRUE)$ix
	selection <- selection[1:mod@control$multistart]
	parinit <- matrixinit[, selection, drop = FALSE]
  	
lp <- nrow(parinit)
covinit <- list()
pari <- as.numeric(parinit[, 1])
covinit[[1]] <- vec1(mod@covar, pari[1:(lp-1)])
covinit[[1]]@sd2 <- pari[lp]
return(list(par = parinit, value = fninit[selection], 
cov = covinit,lower = c(lower, varinit.lower), upper = c(upper, varinit.upper)))
}
###########

